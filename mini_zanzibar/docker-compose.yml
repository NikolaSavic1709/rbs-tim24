version: '3.8'

services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/resources:/var/www/resources
      - ./nginx/log:/var/log/nginx
    depends_on:
      - go_app
    networks:
      - app_network

  consul:
    image: hashicorp/consul
    command: [ "consul", "agent", "-dev", "-client", "0.0.0.0" ]
    ports:
      - "8500:8500"
    networks:
      - app_network
    depends_on:
      - psql
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8500/v1/status/leader"]
      interval: 10s
      timeout: 5s
      retries: 5

  psql:
    image: postgres:15
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    volumes:
      - ./data/postgresql:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  go_app:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      PORT: 8080
    deploy:
      replicas: 3
    ports:
      - "8080-8082:8080"
    depends_on:
      psql:
        condition: service_healthy
      consul:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app_network

  redis:
    image: "redis:7.2.4"
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    restart: always
    networks:
      - app_network
    volumes:
      - ./data/redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  app_network:
    driver: bridge
